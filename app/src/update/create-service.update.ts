import { ConfigService } from '@nestjs/config';
import { Action, Ctx, Update } from 'nestjs-telegraf';
import {
  DESIGNER_CHAT,
  PERSONAL_OFFICE_SPECIALIST,
} from 'src/constant/chat-id.constant';
import { Actions } from 'src/enum/actions.enum';
import { Commands } from 'src/enum/commands.enum';
import { TelegrafContext } from 'src/interface/telegraf.context';
import { SellersHubBotApi } from 'src/utils/api-class.utils';
import { getInlineButtons } from 'src/utils/get-buttons.utils';
import * as htmlParser from 'node-html-markdown';

@Update()
export class CreateServiceUpdate {
  constructor(
    private readonly sellersHubBotApi: SellersHubBotApi,
    private readonly configService: ConfigService,
  ) {}

  clearServiceData(ctx: TelegrafContext) {
    ctx.session.create_service_ctx = {
      categorySlug: null,
      chatId: null,
      description: null,
      image: null,
      price: null,
      serviceId: null,
    };
    return 1;
  }

  @Action(Commands['create-service'])
  async createServiceAction(@Ctx() ctx: TelegrafContext) {
    ctx.session.action = Actions['create-service'];
    this.clearServiceData(ctx);
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–π —É—Å–ª—É–≥–∏.', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              callback_data: `/create-service/dizajnery/${DESIGNER_CHAT}`,
              text: '–ò–Ω—Ñ–æ—Ä–≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –º–∞—Ä—Ç–∫–µ–ø–ª–µ–π—Å–æ–≤ –æ—Ç –°–µ–ª–ª–µ—Ä—Å—Ö–∞–±',
            },
          ],
          [
            {
              callback_data: `/create-service/menedzhery/${PERSONAL_OFFICE_SPECIALIST}`,
              text: '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –õ–ö –æ—Ç –°–µ–ª–ª–µ—Ä—Å—Ö–∞–±',
            },
          ],
          [
            {
              text: '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
              callback_data: Commands.menu,
            },
          ],
        ],
      },
    });
  }

  @Action(/(?<=create-service\/).*/)
  async createService(@Ctx() ctx: TelegrafContext) {
    const { jwt } = ctx.session;
    const matchArr = ctx.match.input.split('/');
    const slug = matchArr[matchArr.length - 2];
    const chatId = matchArr[matchArr.length - 1];
    ctx.session.create_service_ctx.chatId = chatId;
    ctx.session.create_service_ctx.categorySlug = slug;
    if (jwt) {
      await ctx.reply(
        '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å Sellershub?',
        getInlineButtons(
          [
            {
              data: '/use-sh-profile/yes',
              text: '–î–∞',
            },
            {
              data: '/use-sh-profile/no',
              text: '–ù–µ—Ç',
            },
          ],
          1,
        ),
      );
    } else {
      await ctx.reply(
        '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å–ª—É–≥–∞–º —Å —Å–∞–π—Ç–∞ Sellershub –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏.',
        getInlineButtons(
          [
            {
              data: Commands['sign-in'],
              text: '–í–æ–π—Ç–∏?',
            },
            {
              data: 'create-via-bot',
              text: '–°–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É —á–µ—Ä–µ–∑ –±–æ—Ç.',
            },
          ],
          1,
        ),
      );
    }
  }

  @Action(/(?<=use-sh-profile\/).*/)
  async checkShProfile(@Ctx() ctx: TelegrafContext) {
    const { categorySlug } = ctx.session.create_service_ctx;
    const matchArr = ctx.match.input.split('/');
    const decision = matchArr[matchArr.length - 1];

    if (decision && decision === 'yes') {
      const profile = await this.sellersHubBotApi.getMyProfile(ctx);
      const { services } = profile.data.attributes;

      if (services.data.length) {
        const servicesByCategorySlug = services.data
          .filter((s) =>
            s.attributes.service_categories.data.find(
              (c) => c.attributes.slug === categorySlug,
            ),
          )
          .flat();
        if (servicesByCategorySlug.length) {
          const menu = servicesByCategorySlug.map((s) => {
            return {
              data: `/create-via-site/${s.id}`,
              text: s.attributes.name,
            };
          });
          await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.',
            getInlineButtons(menu, 1),
          );
        } else {
          await ctx.reply(
            '–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ.–°–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É —á–µ—Ä–µ–∑ –±–æ—Ç?',
            getInlineButtons(
              [
                {
                  text: '–î–∞',
                  data: 'create-via-bot',
                },
                {
                  text: '‚Ü©Ô∏è –ù–µ—Ç (–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.)',
                  data: Commands.menu,
                },
              ],
              1,
            ),
          );
        }
      } else {
        await ctx.reply(
          '–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –Ω–∞ —Å–∞–π—Ç–µ.–°–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É —á–µ—Ä–µ–∑ –±–æ—Ç? ü§ñ',
          getInlineButtons(
            [
              {
                text: '–î–∞ ‚úÖ',
                data: 'create-via-bot',
              },
              {
                text: '–ù–µ—Ç (–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.) ‚Ü©Ô∏è',
                data: Commands.menu,
              },
            ],
            1,
          ),
        );
      }
    }
    if (decision && decision === 'no') {
      await ctx.reply(
        '–°–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É —á–µ—Ä–µ–∑ –±–æ—Ç? ü§ñ',
        getInlineButtons(
          [
            {
              text: '–î–∞ ‚úÖ',
              data: 'create-via-bot',
            },
            {
              text: '–ù–µ—Ç (–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.) ‚Ü©Ô∏è',
              data: Commands.menu,
            },
          ],
          1,
        ),
      );
    }
  }

  @Action('create-via-bot')
  async createServiceViaBot(@Ctx() ctx: TelegrafContext) {
    await ctx.reply(
      '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n1.–ü—Ä–µ–≤—å—é —É—Å–ª—É–≥–∏. üåÑ\n2.–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ üî†',
    );
    await ctx.reply(
      '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ,–æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–≤—å—é –≤ –≤–∞—à–µ–π —É—Å–ª—É–≥–µ. üìé',
    );
  }

  @Action('send-to-chat')
  async sendMessageToChat(@Ctx() ctx: TelegrafContext) {
    const { serviceId, chatId, categorySlug } = ctx.session.create_service_ctx;
    let review = {
      data: [],
    };

    if (serviceId) {
      const service = await this.sellersHubBotApi.getService(+serviceId, ctx);
      review = service.data.attributes.review;
    }

    if (ctx.session.create_service_ctx.image) {
      await ctx.telegram.sendPhoto(
        ctx.session.create_service_ctx.chatId,
        ctx.session.create_service_ctx.image[0].file_id,
        {
          parse_mode: 'Markdown',
          caption: ctx.session.create_service_ctx.description,
          reply_markup: serviceId
            ? {
                inline_keyboard: [
                  [
                    {
                      text: `–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã üó£Ô∏è (${review.data.length})`,
                      callback_data: `/show-more-info/reviews/${serviceId}/${chatId}`,
                    },
                  ],
                  [
                    {
                      text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏ –Ω–∞ —Å–∞–π—Ç–µ üîó',
                      url: `${
                        this.configService.get('API').split('api')[0]
                      }/catalog/profi/${categorySlug}/${serviceId}`,
                    },
                  ],
                  [
                    {
                      text: '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã üí≠',
                      callback_data: `/show-more-info/contacts/${serviceId}/${chatId}`,
                    },
                  ],
                ],
              }
            : {
                inline_keyboard: [
                  [
                    {
                      text: '–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. ‚õîÔ∏è',
                      callback_data: `mockData`,
                    },
                  ],
                  [
                    {
                      text: '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã üí≠',
                      callback_data: `/show-contacts/${chatId}/${ctx.session.from.username}`,
                    },
                  ],
                ],
              },
        },
      );
    } else {
      await ctx.telegram.sendMessage(
        ctx.session.create_service_ctx.chatId,
        ctx.session.create_service_ctx.description,
        {
          parse_mode: 'Markdown',
          reply_markup: serviceId
            ? {
                inline_keyboard: [
                  [
                    {
                      text: `–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã üó£Ô∏è (${review.data.length})`,
                      callback_data: `/show-more-info/reviews/${serviceId}/${chatId}`,
                    },
                  ],
                  [
                    {
                      text: '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã üí≠',
                      callback_data: `/show-more-info/contacts/${serviceId}/${chatId}`,
                    },
                  ],
                  [
                    {
                      text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏ –Ω–∞ —Å–∞–π—Ç–µ üîó',
                      url: `${
                        this.configService.get('API').split('api')[0]
                      }/catalog/profi/${categorySlug}/${serviceId}`,
                    },
                  ],
                ],
              }
            : {
                inline_keyboard: [
                  [
                    {
                      text: '–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. ‚õîÔ∏è',
                      callback_data: `mockData`,
                    },
                  ],
                  [
                    {
                      text: '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã üí≠',
                      callback_data: `/show-contacts/${chatId}/${ctx.session.from.username}`,
                    },
                  ],
                ],
              },
        },
      );
    }

    await ctx.reply(
      '–£—Å–ª—É–≥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.',
      getInlineButtons([
        {
          data: Commands.menu,
          text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. ‚Ü©Ô∏è',
        },
      ]),
    );
  }

  @Action(/(?<=show-contacts\/).*/)
  async sendContacts(@Ctx() ctx: TelegrafContext) {
    const mathArr = ctx.match.input.split('/');
    const username = mathArr[mathArr.length - 1];
    await ctx.telegram.sendMessage(
      //@ts-ignore
      ctx.update.callback_query.from.id,
      `telegram: ${'https://t.me/' + username}`,
    );
  }

  @Action(/(?<=show-more-info\/).*/)
  async sendMoreInfo(@Ctx() ctx: TelegrafContext) {
    const matchArr = ctx.match.input.split('/');
    const infoType = matchArr[matchArr.length - 3];
    const serviceId = matchArr[matchArr.length - 2];
    const service = await this.sellersHubBotApi.getService(+serviceId, ctx);
    if (infoType === 'reviews') {
      const reviews = service.data.attributes.review.data;
      if (reviews.length) {
        const categorySlug =
          service.data.attributes.service_categories.data[0].attributes.slug;
        const serviceUrl = `${
          this.configService.get('API').split('api')[0]
        }catalog/profi/${categorySlug}/${serviceId}?telegram-reviews=true`;

        await ctx.telegram.sendMessage(
          //@ts-ignore
          ctx.update.callback_query.from.id,
          '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã',
                    web_app: {
                      url: serviceUrl,
                    },
                  },
                ],
              ],
            },
          },
        );
      } else {
        await ctx.telegram.sendMessage(
          //@ts-ignore
          ctx.update.callback_query.from.id,
          '–û—Ç–∑—ã–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. üòû',
        );
      }
    }
    if (infoType === 'contacts') {
      const {
        contact_telegram,
        contact_email,
        contact_instagram,
        contact_viber,
        contact_vk,
        contact_whatsup,
        phone_number,
      } = service.data.attributes.profile.data.attributes;

      const contactsMessage = `telegram: ${
        contact_telegram ? contact_telegram : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }\nemail: ${contact_email ? contact_email : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\ninstagram:${
        contact_instagram ? contact_instagram : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }\nviber: ${contact_viber ? contact_viber : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\nvk:${
        contact_vk ? contact_vk : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }\nwhatsapp: ${
        contact_whatsup ? contact_whatsup : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      }\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone_number ? phone_number : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`;

      await ctx.telegram.sendMessage(
        //@ts-ignore
        ctx.update.callback_query.from.id,
        contactsMessage,
      );
    }
  }

  @Action(/(?<=create-via-site\/).*/)
  async createServiceViaSite(@Ctx() ctx: TelegrafContext) {
    const matchArr = ctx.match.input.split('/');
    const id = matchArr[matchArr.length - 1];
    const service = await this.sellersHubBotApi.getService(+id, ctx);

    ctx.session.create_service_ctx.serviceId = service.data.id;

    ctx.session.create_service_ctx.description =
      htmlParser.NodeHtmlMarkdown.translate(
        service.data.attributes.description.substring(0, 1000) + '...',
      );

    if (
      service.data.attributes.previews.data &&
      service.data.attributes.previews.data.length
    ) {
      const image = `${this.configService.get('API')}${
        service.data.attributes.previews.data[0].attributes.url
      }`;
      ctx.session.create_service_ctx.image = [
        {
          file_id: image,
        },
      ];
      await ctx.replyWithPhoto(
        ctx.session.create_service_ctx.image[0].file_id,
        {
          caption: ctx.session.create_service_ctx.description,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ',
                  callback_data: 'send-to-chat',
                },
              ],
              [
                {
                  text: '–ù–µ—Ç (–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é) ‚Ü©Ô∏è',
                  callback_data: Commands.menu,
                },
              ],
            ],
          },
        },
      );
    } else {
      await ctx.reply(ctx.session.create_service_ctx.description, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ',
                callback_data: 'send-to-chat',
              },
            ],
            [
              {
                text: '–ù–µ—Ç (–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é) ‚Ü©Ô∏è',
                callback_data: Commands.menu,
              },
            ],
          ],
        },
      });
    }
  }
}
