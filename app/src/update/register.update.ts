import { Action, Ctx, Message, On, Update } from 'nestjs-telegraf';
import { Actions } from 'src/enum/actions.enum';
import { Commands } from 'src/enum/commands.enum';
import { TelegrafContext } from 'src/interface/telegraf.context';
import { LoggerService } from 'src/logger/logger.service';
import {
  getSignInCredentials as getSignInCredentials,
  INVALID_EMAIL,
} from 'src/message';
import { SellersHubBotApi } from 'src/utils/api-class.utils';
import { getInlineButtons } from 'src/utils/get-buttons.utils';

@Update()
export class RegisterUpdate {
  constructor(
    private readonly sellersBotApi: SellersHubBotApi,
    private readonly loggerService: LoggerService,
  ) {}

  @Action(Commands.register)
  async registerAction(@Ctx() ctx: TelegrafContext) {
    await this.loggerService.updateLog({
      action: Commands.register,
      day: new Date().toDateString(),
      telegram_id: ctx.from.id,
      username: ctx.from.username,
    });
    ctx.session.action = Actions.register;
    this.clearRegisterData(ctx);
    await ctx.replyWithHTML(
      `–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞–ª–∏–¥–Ω—ã–π <b>email</b>.\n–ù–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –ø—Ä–∏–¥—ë—Ç –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ–∂–¥–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. üëá`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                callback_data: Commands.menu,
              },
            ],
          ],
        },
      },
    );
  }

  @On('photo')
  async test(@Ctx() ctx: TelegrafContext, @Message('photo') photo: any) {
    if (ctx.session.action === Actions['create-service']) {
      ctx.session.create_service_ctx.image = photo;
    }
    if (ctx.session.create_service_ctx.image) {
      ctx.replyWithHTML(
        '–û—Ç–ª–∏—á–Ω–æ!–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —É—Å–ª—É–≥–∏.(<b>–Ω–µ –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤</b>)',
      );
    }
  }

  @On('text')
  async pinMessage(@Ctx() ctx: TelegrafContext) {
    if (!ctx.session.pinTick) {
      const pin = await ctx.replyWithHTML(
        '–î–æ—Ä–æ–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏,–º—ã –æ–±–Ω–æ–≤–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.\n–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n1.–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞.\n2.–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç" –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞.\n3.–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∫–∞—Å–∞–µ–º–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É  <a href="https://t.me/Sellershub_support">–ø–æ–¥–¥–µ—Ä–∂–∫—É.</a>',
      );
      ctx.session.pinTick = true;
      await ctx.pinChatMessage(pin.message_id);
    }
  }

  @On(Commands.message)
  async getMessage(
    @Message('text') message: string,
    @Ctx() ctx: TelegrafContext,
  ) {
    if (
      ctx.session.action === Actions['create-service'] &&
      ctx.session.create_service_ctx.image
    ) {
      ctx.session.create_service_ctx.description = message;
      if (ctx.session.create_service_ctx.description.length > 1000) {
        ctx.session.create_service_ctx.description.substring(0, 1000) + '...';
      }
      if (ctx.session.create_service_ctx.description) {
        await ctx.replyWithPhoto(
          ctx.session.create_service_ctx.image[0].file_id,
        );
        await ctx.reply(ctx.session.create_service_ctx.description);
        await ctx.reply(
          '–û—Ç–ª–∏—á–Ω–æ!–í–æ—Ç –≤–∞—à–∞ —É—Å–ª—É–≥—É.–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?',
          getInlineButtons([
            {
              data: 'send-to-chat',
              text: '–î–∞',
            },
            {
              data: Commands.menu,
              text: '–ù–µ—Ç (–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)',
            },
          ]),
        );
      }
    }
    if (ctx.session.action === Actions['sign-in']) {
      !ctx.session.login_data.validateEmail
        ? (ctx.session.login_data.identifier = message)
        : (ctx.session.login_data.password = message);
      if (
        ctx.session.login_data.identifier.length &&
        ctx.session.login_data.identifier.match(
          /^([a-z0-9_-]+\.)*[a-z0-9_-]+@[a-z0-9_-]+(\.[a-z0-9_-]+)*\.[a-z]{2,6}$/,
        )
      ) {
        ctx.session.login_data.validateEmail = true;
        if (ctx.session.login_data.password.length) {
          await ctx.replyWithHTML(
            getSignInCredentials(ctx),
            getInlineButtons(
              [
                {
                  text: '–î–∞',
                  data: '/sign-in/continue',
                },
                {
                  text: '–ù–µ—Ç',
                  data: Commands.menu,
                },
              ],
              1,
            ),
          );
        } else {
          await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: üëá');
        }
      } else {
        await ctx.reply(INVALID_EMAIL);
      }
    }
    if (ctx.session.action === Actions.register) {
      ctx.session.register_data.email = message;
      if (
        ctx.session.register_data.email.length &&
        ctx.session.register_data.email.match(
          /^([a-z0-9_-]+\.)*[a-z0-9_-]+@[a-z0-9_-]+(\.[a-z0-9_-]+)*\.[a-z]{2,6}$/,
        )
      ) {
        ctx.session.register_data.validateEmail = true;
        ctx.session.register_data.password = this.generatePass();
        await ctx.replyWithHTML(
          `<b>–í–∞—à–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\nemail: ${ctx.session.register_data.email},\n–ø–∞—Ä–æ–ª—å: ${ctx.session.register_data.password}`,
        );
        await ctx.reply(
          '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
          getInlineButtons(
            [
              {
                data: '/register/continue',
                text: '–î–∞',
              },
              {
                data: Commands.menu,
                text: '–ù–µ—Ç',
              },
            ],
            1,
          ),
        );
      } else {
        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
      }
    }
  }

  @Action('/register/continue')
  async registration(@Ctx() ctx: TelegrafContext) {
    const { email, password } = ctx.session.register_data;
    const registerData = await this.sellersBotApi.registration(
      ctx,
      email,
      password,
      email,
    );
    if (registerData && registerData.user.id) {
      ctx.session.action = null;
      this.clearRegisterData(ctx);
      await ctx.reply(
        '–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π e-mail –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
        getInlineButtons([
          {
            text: '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
            data: Commands.menu,
          },
        ]),
      );
    }
  }

  generatePass() {
    const chars =
      '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const passwordLength = 12;
    let password = '';
    for (let i = 0; i <= passwordLength; i++) {
      const randomNumber = Math.floor(Math.random() * chars.length);
      password += chars.substring(randomNumber, randomNumber + 1);
    }
    return password;
  }

  clearRegisterData(ctx: TelegrafContext) {
    ctx.session.register_data = {
      email: '',
      password: '',
      validateEmail: false,
    };
    return 1;
  }
}
